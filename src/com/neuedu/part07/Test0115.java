package com.neuedu.part07;

import java.util.UUID;

/**
 * 1.静态static
 * 可以修饰：方法、属性、代码块，一般用来修饰类的成员，不能修饰局部变量（用static修饰类的成员可以不通过引用调用，直接通过类名调用）
 * 修饰属性能实现数据共享，为类变量，在类被载入时创建，类存在变量就存在
 * 修饰方法为类方法，在类被载入时创建，类存在变量就存在
 * 修饰代码块，静态代码块优于构造方法调用，一般用于静态属性（一般设置为大写字母）的初始化
 * 静态方法中只能调用静态方法和静态属性：因为static修饰的类成员加载比较早，调用非静态成员或方法可能找不到
 * 
 * 类被载入的时机：new 对象时
 *            用类名调用静态属性和方法时
 * 2.单例模式（设计模式）Singleton
 * 类只能有一个实例（对象）
 * 不能让他创建多个对象，需要把构造函数藏起来，private修饰
 * 通过构造函数创建对象，需要在单例类创建一个对象
 * 这个对象需要可以进行业务处理功能，不想要对象通过类.对象直接被获取，所以需要放在一个方法里取
 * 这个方法的返回值就是这个对象，想要外面使用的话需要是静态方法
 * 静态方法里面的对象也需要是静态的，所以需要加上static，但是这样的话对象又可以直接获取了
 * 为了不让对象直接可以被获取，把这个对象定义为私有
 * 两种单例模式:饿汉式，new过程在外面
 *          懒汉式，new过程在方法里，进来先判断对象有没有创建，没有创建就创建，有则返回
 * 3.final关键字
 * 可以修饰程序中的多种元素，包括类、方法、属性和局部变量。修饰的局部变量叫常量
 * 修饰类，这个类不能被继承
 * 修饰属性和局部变量时，都不可以被重新赋值（修饰属性时，一般和static一起用）
 * 修饰方法时，不能被覆盖
 * 字母大写，单词之间用下划线
 * 面试题：final和static区别
 * 4.抽象类
 * 程序设计时，一个类没有特定需要实现的功能，只需要别的类继承实现他的行为，这种时候，可以设置为一个抽象类
 * 定义：使用abstract修饰class
 * 组成：可以有正常类的成员，还可以有抽象方法
 * 抽象类可以继承类，抽象类里可以没有抽象方法
 * 抽象类不可以实例化
 * 子类继承抽象类需要实现父类的抽象方法，如果不实现子类设置成抽象类
 * 5.多态
 * 通过父类引用调用方法，在程序运行时才能确定方法形态功能的现象
 * 形成多态的必要条件：有继承或实现关系
 *               需要重写方法
 *               父类的引用指向了子类的对象(向上转型)
 * 多态使用场景：
 * 参数多态
 * 返回值多态
 * 6.接口     
 * 接口描述了类的行为，是一套规范
 * [public] interface 接口名[extends 父类接口名]{属性必须是常量，方法必须是抽象方法 }
 * 接口方法默认为抽象，可省略abstract
 * 接口可以多继承（extends）
 * 类实现（继承）接口用（implements）多个接口名用逗号相隔
 * 
 * 面试题：抽象类和接口的区别？
 * 抽象类是一个类，只能单继承，接口可以继承实现多个
 * 抽象类可以有属性，接口只能有常量
 * 抽象类可以有非抽象方法，接口只能有抽象方法
 * 抽象类代表实物对象本身，接口代表对象的行为
 *
 */

public class Test0115 {
	static boolean b;
	
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		China china=new China();
		china.COUNTRY="中国";
		China.COUNTRY="中华人民共和国";
		China china2=new China();
		System.out.println(china2.COUNTRY);
		
	    System.out.println(UUID.randomUUID());//生成唯一标识
	    for(int i=0;i<100;i++){
	    	System.out.println(Singleton.getInstance());
	    }
	    final int i=1;//i的值不变
	    

	}

}

class China{
	String name;
	static String COUNTRY;
	String age;
	//代码块部分要先于构造方法执行
	public China(){
		System.out.println("我是构造方法");
	}
	
	static{//可以用来静态属性的初始化
		System.out.println("我是静态代码块");
		COUNTRY="中国";
	}
	
	{
		System.out.println("我是代码块");
	}
}

//接口


